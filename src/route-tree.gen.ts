/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as IndexRouteImport } from './pages/index'
import { Route as AuthSigninRouteImport } from './pages/_auth/signin'
import { Route as AppPatientsIndexRouteImport } from './pages/_app/patients/index'
import { Route as AppAgendaIndexRouteImport } from './pages/_app/agenda/index'
import { Route as AppPatientsPatientIdRouteImport } from './pages/_app/patients/$patientId'

const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/_auth/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AppPatientsIndexRoute = AppPatientsIndexRouteImport.update({
  id: '/patients/',
  path: '/patients/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppAgendaIndexRoute = AppAgendaIndexRouteImport.update({
  id: '/agenda/',
  path: '/agenda/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppPatientsPatientIdRoute = AppPatientsPatientIdRouteImport.update({
  id: '/patients/$patientId',
  path: '/patients/$patientId',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof AuthSigninRoute
  '/patients/$patientId': typeof AppPatientsPatientIdRoute
  '/agenda': typeof AppAgendaIndexRoute
  '/patients': typeof AppPatientsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof AuthSigninRoute
  '/patients/$patientId': typeof AppPatientsPatientIdRoute
  '/agenda': typeof AppAgendaIndexRoute
  '/patients': typeof AppPatientsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth/signin': typeof AuthSigninRoute
  '/_app/patients/$patientId': typeof AppPatientsPatientIdRoute
  '/_app/agenda/': typeof AppAgendaIndexRoute
  '/_app/patients/': typeof AppPatientsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/signin' | '/patients/$patientId' | '/agenda' | '/patients'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/patients/$patientId' | '/agenda' | '/patients'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth/signin'
    | '/_app/patients/$patientId'
    | '/_app/agenda/'
    | '/_app/patients/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthSigninRoute: typeof AuthSigninRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signin': {
      id: '/_auth/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/patients/': {
      id: '/_app/patients/'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof AppPatientsIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/agenda/': {
      id: '/_app/agenda/'
      path: '/agenda'
      fullPath: '/agenda'
      preLoaderRoute: typeof AppAgendaIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/patients/$patientId': {
      id: '/_app/patients/$patientId'
      path: '/patients/$patientId'
      fullPath: '/patients/$patientId'
      preLoaderRoute: typeof AppPatientsPatientIdRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppPatientsPatientIdRoute: typeof AppPatientsPatientIdRoute
  AppAgendaIndexRoute: typeof AppAgendaIndexRoute
  AppPatientsIndexRoute: typeof AppPatientsIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppPatientsPatientIdRoute: AppPatientsPatientIdRoute,
  AppAgendaIndexRoute: AppAgendaIndexRoute,
  AppPatientsIndexRoute: AppPatientsIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthSigninRoute: AuthSigninRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
